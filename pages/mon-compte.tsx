import Header from "../components/Header";
import HeaderProfile from "../components/HeaderProfile";
import ElementsProfile from "../components/ElementsProfile";
import InfoProfile from "../components/InfoProfile";
import { Josefin_Sans } from "@next/font/google";
import Head from "next/head";
import { UserContext } from "../contexts/UserContext";
import { useRef, useState, useContext, useEffect } from "react";
import { MouseEventHandler } from "react";
import Address from "../components/Address";
import Orders from "../components/Orders";
import { User } from "../models/User";
import Cookies from "js-cookie";
const josefinSans = Josefin_Sans({
  subsets: ["latin"],
  weight: ["300"],
  display: "swap",
});

export default function MyAccount() {
  const [isLoading, setIsLoading] = useState(true);
  const [subMenu, setSubMenu] = useState("informations");
  const [isInformationsSelected, setIsInformationsSelected] = useState(true);
  const [isAddressSelected, setIsAddressSelected] = useState(false);
  const [isOrdersSelected, setIsOrdersSelected] = useState(false);
  const {
    user,
    setUser,
    userEdit,
    setUserEdit,
    address,
    setAddress,
    addressEdit,
    setAddressEdit,
  } = useContext(UserContext);
  const token = Cookies.get("token");
  console.log(token);

  const getUserInformations = async () => {
    const response = await fetch(
      process.env.NEXT_PUBLIC_API_HOST + `/users/current`,
      {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
      }
    );
    const dt = await response.json();

    let newUser: User = new User();
    newUser.addresses = dt.addresses;
    newUser.email = dt.email;
    newUser.firstName = dt.firstName;
    newUser.lastName = dt.lastName;
    newUser.orders = [];
    newUser.roles = [];
    newUser.id = dt.id;

    if (newUser.addresses) {
      setAddressEdit(newUser.addresses[0]);
      setAddress(newUser.addresses[0]);
    }
    setUser(newUser);
    setIsLoading(false);
  };

  useEffect(() => {
    getUserInformations();
  }, [isLoading]);

  function displaySubMenu(subMenu: string) {
    setSubMenu(subMenu);
    switch (subMenu) {
      case "informations": {
        setIsInformationsSelected(true);
        setIsAddressSelected(false);
        setIsOrdersSelected(false);
        break;
      }
      case "address": {
        setIsInformationsSelected(false);
        setIsAddressSelected(true);
        setIsOrdersSelected(false);
        break;
      }
      case "orders": {
        setIsInformationsSelected(false);
        setIsAddressSelected(false);
        setIsOrdersSelected(true);
        break;
      }
    }

    return undefined;
  }
  return (
    <>
      <Head>
        <title>SIUMAIILOTS</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={josefinSans.className}>
        <Header />
        {!isLoading && (
          <div className="container mx-auto flex">
            <div className="w-3/12 ml-4">
              <HeaderProfile />
              <div onClick={() => displaySubMenu("informations")}>
                <ElementsProfile
                  name="Mes informations"
                  selected={isInformationsSelected}
                />
              </div>
              <div onClick={() => displaySubMenu("address")}>
                <ElementsProfile
                  name="Mes adresses"
                  selected={isAddressSelected}
                />
              </div>
              <div onClick={() => displaySubMenu("orders")}>
                <ElementsProfile
                  name="Mes commandes"
                  selected={isOrdersSelected}
                />
              </div>
              <ElementsProfile name="DÃ©connexion" selected={false} />
            </div>
            <div className="w-9/12">
              {subMenu == "informations" && (
                <InfoProfile
                  isLoading={isLoading}
                  setIsLoading={setIsLoading}
                />
              )}
              {subMenu == "address" && (
                <Address isLoading={isLoading} setIsLoading={setIsLoading} />
              )}
              {subMenu == "orders" && <Orders />}
            </div>
          </div>
        )}
      </main>
    </>
  );
}
