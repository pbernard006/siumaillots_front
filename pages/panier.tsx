import Head from "next/head";
import React from "react";
import { Josefin_Sans } from "@next/font/google";
import Header from "../components/Header";
import { JerseyBasket } from "../components/JerseyBasket";
import { useEffect, useState } from "react";
import Cookies from "js-cookie";
import { JerseyFromBasket } from "../models/JerseyFromBasket";
import Router from "next/router";
import { useRouter } from "next/router";
import { Address } from "../models/Address";
import Link from "next/link";
const josefinSans = Josefin_Sans({
  subsets: ["latin"],
  weight: ["300"],
  display: "swap",
});

export default function Panier() {
  const [jerseys, setJerseys] = useState<JerseyFromBasket[]>([]);
  const [addresses, setAdresses] = useState<Address[]>([]);
  const [address, setAdress] = useState<"">();
  const [basketId, setBasketId] = useState("");
  const [total, setTotal] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const [isAddressesLoading, setIsAddressesLoading] = useState(true);
  const token = Cookies.get("token");
  const route = useRouter();
  const [failed, setFailed] = useState(true);
  const [active, setActive] = useState(false)

  const isLoggedIn = () => {
    if (!token) {
      route.push('/connexion');
    }
  }

  const getStatus = () => {
    const statusCommand = route.query.status;
    if(statusCommand == 'fail' && failed) {
      alert("Votre commande a échoué, veuillez essayer plus tard...")
      setFailed(false);
    }
  }

  const getJerseys = async () => {
    const response = await fetch(
      process.env.NEXT_PUBLIC_API_HOST + "/current-basket",
      {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );
    const dt = await response.json();
    setBasketId(dt.basketId);
    setTotal(dt.totalPrice);
    setJerseys(dt.jerseys);
    if (dt?.addresses?.length > 0) {
      setAdresses(dt.addresses);
      setIsAddressesLoading(false);
    }
    setIsLoading(false);
  };

  const payBasket = async () => {
    const order = {
      orderId: basketId,
      addressId: address,
    };
    const response = await fetch(
      process.env.NEXT_PUBLIC_API_HOST + "/create-checkout-session",
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(order),
      }
    );

    const result = await response.json();
    if (response.status == 200) {
      const url = result.url;
      Router.push(url);
    } else {
      alert("Une erreur s'est produite, veuillez essayer plus tard...")
    }
  };

  const onChange = (event:any) => {
    const btnPayBasket = document.getElementById('btnPayBasket') as HTMLInputElement | null;
    if (btnPayBasket) {
      if (event.target.value !='') {
        setActive(true);
        setAdress(event.target.value);
      } else {
        setActive(false);
      }
    }
  };

  useEffect(() => {
    isLoggedIn();
    getJerseys();
  }, []);
  getStatus();

  return (
    <>
      <Head>
        <title>SIUMAIILOTS</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={josefinSans.className}>
        <Header />
        {!jerseys && (
          <div className="text-xl flex justify-center font-bold text-center my-20">
            <h1>Votre panier est vide...<br/>
            N'hésitez pas à ajouter un SIUUUU maillot !</h1>
          </div>
        )}
        {!isLoading && jerseys && (
          <div className="flex justify-center my-20">
            <div className="flex flex-col gap-4 w-5/12  text-center">
              {jerseys?.map((jersey, index) => (
                <JerseyBasket
                  key={index}
                  id={jersey.jerseyId}
                  size={jersey.size}
                  quantity={jersey.quantity}
                />
              ))}
            </div>
            <div className="ml-40">
              <div className="flex m-5 justify-center m-auto font-bold">
                <h4 className="uppercase ">Total : </h4>
                <h4 className="ml-3">{total} €</h4>
              </div>
              <div className="mt-5 flex flex-col items-center">
                {!isAddressesLoading && (
                  <select className="border-solid border-2 border-black rounded-lg" name="addressSelect" id="addressSelect" onChange={onChange} >
                    <option value="">-- Veuillez choisir une adresse --</option>
                    {addresses.map((address, index) => (
                      <option key={index} value={address.id}>{address.number + " " + address.name + " - " + address.city}</option>
                      ))}
                  </select>                
                )}
                {isAddressesLoading && (
                  <div>
                    <p>Veuillez saisir une addresse dans 
                    <span className="font-bold"><Link href="/mon-compte"> votre compte </Link></span>
                    compte avant de procéder au paiement.</p>
                  </div>
                )}
                <button
                  onClick={payBasket}
                  className="bg-red m-5 w-full font-bold text-white rounded-lg btn-payment"
                  disabled={!active}
                  id='btnPayBasket'
                  >
                  Procéder au paiement
                </button>
              </div>
            </div>
          </div>
        )}
      </main>
    </>
  );
}
